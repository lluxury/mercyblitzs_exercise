
    // 服务发现现状
      // sc 架构
        // feign
        // sc Stream
// 待补完
 
      // 服务发现
        // Netflix Eureka
        // Zookeeper
        // Consul go
 
      // Eureka
        // sc 背书
        // ap
        // 简单易用,有控制台,2.0闭源
        // 内存限制 3w
        // 单一调度更新
        // 伸缩限制
// 广播限制规模

      // zookeeper
        // 成熟方案
// cp 强一致性
        // 维护成本
        // 伸缩限制 2w
// 内存型限制,
 
      // consul
        // 通用方案
        // ap模型
        // 未大规模验证 5k
        // go语言障碍
// Spring Cloud Consul

      // 基本流程
        // 启动注册中心
        // 增加客户端依赖
        // 注册客户端
 
// 部署eureka

https://start.spring.io/
// 基本设置默认, 设置一下Group和Artifact
// Spring Boot 只有2.1.5选了, 比视频里的2.0.5要高
// 依赖选 Eureka Server

// 因为闭源,F版本还用的1.9.3 Eureka

// 配置 注解和服务器端口,启动服务,页面查看,保持启动


// 同上 eureka-client-demo, Eureka Discovery

// https://cloud.spring.io/spring-cloud-static/Finchley.SR1/single/spring-cloud.html

// 配置客户端后,运行,应用报错, 没有阻塞程序, pom增加web依赖
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

// 刷新,确认信息,信息链接

http://localhost:12345/
// Instances currently registered with Eureka

// 同样保持打开状态


// 再回到构建页面
// zookeeper-client-demo, 依赖选择 zoo discover
// 在命令行启动zk
C:\Users\yann\zookeeper-3.4.13\bin\zkServer.cmd

// 确认 zk discovery 版本 3.5.3 不兼容

// view - view tools - maven project  打开视图

// 干掉默认代码,使用网页上3.4代码,位置在上文网页 zookeeper部分

// 增加注解, 引入web 依赖,上文 

// 检测状态
C:\Users\yann\zookeeper-3.4.13\bin\zkCli.cmd
ls
dir
ls /services/zookeeper-client
// [ead1658d-3526-4b67-b7bf-839588684d09]
// 实例id

get /services/zookeeper-client/ead1658d-3526-4b67-b7bf-839588684d09
get /services/zookeeper-client/0f76c71c-810a-498c-87e5-6d6f2e29443b

// 获取节点信息,重启后抓新的实例id

    // Nacos Discovery


org.springframework.cloud
application.properties
@EableDiscoveryClient
// 下载,启动,依赖,配置,激活,注册
// 待补完

// 下载
https://github.com/alibaba/nacos/releases/download/1.0.0/nacos-server-1.0.0.zip

// 启动
sh startup -m standalone
.\startup.cmd   // 8848

http://localhost:8848/

https://github.com/spring-cloud-incubator/spring-cloud-alibaba/blob/master/spring-cloud-alibaba-examples/nacos-example/nacos-discovery-example/readme.md

http://127.0.0.1:8848/nacos/v1/ns/instances?serviceName=service-provider
// 1.0不可用

// http://localhost:8848/nacos/#/login
// nacos nacos

// 加参数
// set "JAVA_OPT=%JAVA_OPT% --server.port=8848"


// nacos-cloud-alibaba-nacos-discovery  nacos-example

// C:/cygwin64/home/yann/coding/java/mercyblitzs_exercise/09-21  Alibaba Nacos Discovery/spring-cloud-alibaba


// 启动nacos-discovery-provider-example项目

// 配置
server.port=18082
spring.application.name=service-provider
spring.cloud.nacos.discovery.server-addr=127.0.0.1:8848
management.endpoints.web.exposure.include=*         // 可以展示的端口
// 默认带的配置

http://localhost:8848/nacos/#/serviceDetail?name=spring-cloud-alibaba-dubbo-provider&groupName=DEFAULT_GROUP


// 注意不要使用cmd下的git,会产生奇怪的问题,比如xml无效

http://localhost:18082/echo/hello,yann
// hello Nacos Discovery hello,yann

http://localhost:18082/actuator/health
// {"status":"UP"}

http://localhost:18082/actuator/metrics
// JSON输出

http://localhost:18082/actuator/mappings
// JSON格式 URL映射


// 启动 nacos-discovery-consumer-example 项目

// 依赖
// spring-cloud-starter-alibaba-nacos-discovery

// 配置
spring.application.name=service-consumer
server.port=18083
management.endpoints.web.exposure.include=*
spring.cloud.nacos.discovery.server-addr=127.0.0.1:8848

    @LoadBalanced
// 负载均衡
// 客户端负载 Ribbon,需要注册中心,获取ip列表

// 两种连接服务端方式
    // RestTemplate
@LoadBalanced RestTemplate URI
public RestTemplate restTemplate() {
        return new RestTemplate();
    }
// 实现也不同
            return restTemplate.getForObject("http://service-provider/echo/" + str,
                String.class);

    // Feign
@FeignClient(name = "service-provider")
    public interface EchoService {
        @RequestMapping(value = "/echo/{str}", method = RequestMethod.GET)
        String echo(@PathVariable("str") String str);

// 面向接口,直接调用
public String feign(@PathVariable String str) {
        return echoService.echo(str);
    }


http://localhost:18083/services
// 获取到注册的服务端,消费端

http://localhost:18083/actuator/nacos-discovery

// https://nacos.io/en-us/docs/open-API.html

http://localhost:8848/nacos/v1/ns/instance/list?serviceName=service-consumer
http://localhost:8848/nacos/v1/ns/instance/list?serviceName=service-provider
// nacos服务器有两个应用,一个实例? services 

// 和视频上的网址略有不同

// 自己写一个测试方法
    @GetMapping(value = "/service/instances/{serviceName}")
    public List<String> serviceInstances(@PathVariable String serviceName){
        return discoveryClient.getInstances(serviceName)
                .stream()
                .map(instance -> instance.getHost() + ":" + instance.getPort() )
                .collect(Collectors.toList());
    }
// 流 + 转换 + ServiceInstance -> ${host}:${port} 字符串,这点不是很熟悉

http://localhost:18083/service/instances/service-consumer
// ["10.10.13.6:18083"] 多ip 不可控, 服务端,客户端都可以取到信息  


JConsole 

    // Nacos 生态
 
    // 抽象原理 Commons
      // 激活注册
        // @EnableDiscoveryClient


// 微服务基于http来做的
instanceId
    // zk 
    0f76c71c-810a-498c-87e5-6d6f2e29443b

    // Eureka
    10.10.6.13:eureka-client:8081

    // nacos
    10.10.13.6#18082#DEFAULT#DEFAULT_GROUP@@service-provider

isSecure
// 是否https

Metadata 
// 元信息
// String,String 格式,频繁序列化,反序列化 性能上有些浪费,开销大

spring-cloud-commons-2.1.1.RELEASE.jar 下,各种实现

      // 服务注册
        // ServiceRegistry 
          // 注册中心
        // Registration
          // ServiceInstance的超类
namingService.registerInstance(serviceId, instance);  
// 注册信息放nacos,持久化可以连db  

      // 负载均衡
        // RibbonServer
        // ServerList
      // Actuator
        // HealthIndicator
        // @Endpoint



// 差3个github地址,后补

// 小马哥的博客
https://mercyblitz.github.io/









