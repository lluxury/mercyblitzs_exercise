
    // 服务发现现状
      // sc 架构
        // feign
        // sc Stream
// 待补完
 
      // 服务发现
        // Netflix Eureka
        // Zookeeper
        // Consul go
 
      // Eureka
        // sc 背书
        // ap
        // 简单易用,有控制台,2.0闭源
        // 内存限制 3w
        // 单一调度更新
        // 伸缩限制
// 广播限制规模

      // zookeeper
        // 成熟方案
// cp 强一致性
        // 维护成本
        // 伸缩限制 2w
// 内存型限制,
 
      // consul
        // 通用方案
        // ap模型
        // 未大规模验证 5k
        // go语言障碍
// Spring Cloud Consul

      // 基本流程
        // 启动注册中心
        // 增加客户端依赖
        // 注册客户端
 
// 部署eureka

https://start.spring.io/
// 基本设置默认, 设置一下Group和Artifact
// Spring Boot 只有2.1.5选了, 比视频里的2.0.5要高
// 依赖选 Eureka Server

// 因为闭源,F版本还用的1.9.3 Eureka

// 配置 注解和服务器端口,启动服务,页面查看,保持启动


// 同上 eureka-client-demo, Eureka Discovery

// https://cloud.spring.io/spring-cloud-static/Finchley.SR1/single/spring-cloud.html

// 配置客户端后,运行,应用报错, 没有阻塞程序, pom增加web依赖
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

// 刷新,确认信息,信息链接

http://localhost:12345/
// Instances currently registered with Eureka

// 同样保持打开状态


// 再回到构建页面
// zookeeper-client-demo, 依赖选择 zoo discover
// 在命令行启动zk
C:\Users\yann\zookeeper-3.4.13\bin\zkServer.cmd

// 确认 zk discovery 版本 3.5.3 不兼容

// view - view tools - maven project  打开视图

// 干掉默认代码,使用网页上3.4代码,位置在上文网页 zookeeper部分

// 增加注解, 引入web 依赖,上文 

// 检测状态
C:\Users\yann\zookeeper-3.4.13\bin\zkCli.cmd
ls
dir
ls /services/zookeeper-client
// [ead1658d-3526-4b67-b7bf-839588684d09]
// 实例id

get /services/zookeeper-client/ead1658d-3526-4b67-b7bf-839588684d09
get /services/zookeeper-client/0f76c71c-810a-498c-87e5-6d6f2e29443b

// 获取节点信息,重启后抓新的实例id

    // Nacos Discovery


org.springframework.cloud
application.properties
@EableDiscoveryClient
// 下载,启动,依赖,配置,激活,注册
// 待补完

// 下载
https://github.com/alibaba/nacos/releases
0.2.1

// 启动
sh startup -m standalone

https://github.com/spring-cloud-incubator/spring-cloud-alibaba/blob/master/spring-cloud-alibaba-examples/nacos-example/nacos-discovery-example/readme.md
http://127.0.0.1:8848/nacos/v1/ns/instances?serviceName=service-provider

// 加参数
set "JAVA_OPT=%JAVA_OPT% --server.port=8848"

nacos-cloud-alibaba-nacos-discovery  nacos-example

server.port = 18082
spring.application.name=service-provider
spring.cloud.nacos.discovery.server-addr=127.0.0.1:8848
management.endpoints.web.exposure.include=*
?
    // Nacos 生态
 
